version: '3.8'

services:
  mariadb:
    image: mariadb:11.8
    container_name: moodle-db
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./mariadb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend

  moodle:
    image: bitnami/moodle:5.0.2
    container_name: moodle-app
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
        restart: true
    environment:
      - MOODLE_DATABASE_HOST=mariadb
      - MOODLE_DATABASE_USER=${MARIADB_USER}
      - MOODLE_DATABASE_PASSWORD=${MARIADB_PASSWORD}
      - MOODLE_DATABASE_NAME=${MARIADB_DATABASE}
      - MOODLE_REVERSE_PROXY=yes
      - MOODLE_SITE_URL=${MOODLE_SITE_URL}
      - MOODLE_USERNAME=${MOODLE_USERNAME}
      - MOODLE_PASSWORD=${MOODLE_PASSWORD}
    volumes:
      - ./moodle_data:/bitnami/moodle
      - ./moodledata_data:/bitnami/moodledata
    networks:
      - backend
      - frontend
    expose:
      - "8080"
    labels:
      # Включаем Traefik для этого контейнера
      - traefik.enable=true
      - traefik.http.routers.moodle-router.rule=Host(`trainer.${DOMAIN}`)
      - traefik.http.routers.moodle-router.entrypoints=websecure
      - traefik.http.routers.moodle-router.tls=true
      - traefik.http.routers.moodle-router.tls.certresolver=cert-resolver
      # Указываем, на какой порт внутри контейнера направлять трафик
      - traefik.http.services.moodle-service.loadbalancer.server.port=8080

  traefik:
    image: traefik:v3.5.2
    container_name: moodle-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "8080" # Порт для доступа к дашборду Traefik (если нужно)
    volumes: # (ro - read-only) не позволяет Traefik изменять файлы конфигурации
      - /var/run/docker.sock:/var/run/docker.sock:ro # Позволяет Traefik "слушать" события Docker
      - ./traefik.yml:/etc/traefik/traefik.yml:ro # Статическая конфигурация Traefik
      - ./acme.json:/acme.json # Файл для хранения сертификатов
    networks:
      - frontend
    labels:
      # Включаем Traefik для этого контейнера (если нужно)
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.tls=true
      - traefik.http.routers.traefik-dashboard.tls.certresolver=cert-resolver

      ### ИСПРАВЛЕНО: Указываем специальный сервис api@internal для роутера с правильным именем
      - traefik.http.routers.traefik-dashboard.service=api@internal

      ### ИСПРАВЛЕНО: Привязываем middleware к роутеру с правильным именем
      - traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth
      # пределяем middleware для аутентификации
      - traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}

# Определяем сети для изоляции сервисов
networks:
  frontend:
  backend: